" ------------ vim basic setting ------------
set nocompatible              " be iMproved, required

call plug#begin('~/.vim/plugged')

" An easy way to browser folders
Plug 'scrooloose/nerdtree'

" An easy way to browser tags
Plug 'majutsushi/tagbar'

" make surrounding fast
Plug 'tpope/vim-surround'

" you can rapidly find files and open it
Plug 'kien/ctrlp.vim'

" make your vim pretty
Plug 'bling/vim-airline'

"color theme
Plug 'altercation/vim-colors-solarized'

" fast move you cursor
Plug 'Lokaltog/vim-easymotion'

" make you html faster
Plug 'mattn/emmet-vim'

" make you write comment faster
Plug 'scrooloose/nerdcommenter'

" git wrapper
Plug 'tpope/vim-fugitive'

" watch your undo history
Plug 'sjl/gundo.vim'

" watch css color in real time
Plug 'skammer/vim-css-color'

Plug 'nathanaelkane/vim-indent-guides'

" alignment tool
Plug 'plasticboy/vim-markdown'

Plug 'jansenm/vim-cmake'

Plug 'w0rp/ale'

" assuming you're using vim-plug: https://github.com/junegunn/vim-plug
Plug 'ncm2/ncm2'

Plug 'roxma/nvim-yarp'

Plug 'sakhnik/nvim-gdb'

Plug 'Xuyuanp/nerdtree-git-plugin'

Plug 'Chiel92/vim-autoformat'

Plug 'vim-scripts/DoxygenToolkit.vim'

" enable ncm2 for all buffers
autocmd BufEnter * call ncm2#enable_for_buffer()

" IMPORTANTE: :help Ncm2PopupOpen for more information
set completeopt=noinsert,menuone,noselect

" NOTE: you need to install completion sources to get completions. Check
" our wiki page for a list of sources: https://github.com/ncm2/ncm2/wiki
Plug 'ncm2/ncm2-bufword'
Plug 'ncm2/ncm2-tmux'
Plug 'ncm2/ncm2-path'
Plug 'ncm2/ncm2-neoinclude' | Plug 'Shougo/neoinclude.vim'
Plug 'ncm2/ncm2-cssomni'
Plug 'ncm2/ncm2-tern'
Plug 'ncm2/ncm2-jedi'
Plug 'ncm2/ncm2-pyclang'
Plug 'ncm2/ncm2-go'

" ctags auto gen for nvim
Plug 'ludovicchabant/vim-gutentags'

call plug#end()

set shiftwidth=2
set tabstop=2
set expandtab
set smartindent
set number
set ignorecase
set incsearch
set ruler
set cursorline
set history=100
set winaltkeys=no
set backspace=2
" enable full color in vim
set t_Co=256

"-------------Solarized Colorscheme----
syntax on
if has('gui_running')
    set background=light
else
    set background=dark
endif
let g:solarized_menu=0
let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:solarized_underline=0
let g:solarized_italic=0
let g:solarized_visibility="low"
let g:solarized_contrast="high"
colorscheme solarized
"---------------------------------------------

"----------basic key mapping-------------
nmap <space> ciw
nmap 8 <C-W>-
nmap 2 <C-W>+
nmap 4 <C-W>>
nmap 6 <C-W><
nmap m <c-W><c-W>
nmap b <CR>
nmap <C-J> <C-F>
nmap <C-K> <C-B>
nmap <C-H> <C-E>
nmap <C-L> <C-Y>
vmap <C-J> <C-F>
vmap <C-K> <C-B>
vmap <C-H> <C-E>
vmap <C-L> <C-Y>
nmap 1 :bprev<CR>
nmap 2 :bnext<CR>
nnoremap N Nzz
nnoremap n nzz
"-----------------------------------------

inoremap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"

"--------------nerdtree--------------------
nnoremap <silent> <F8> :NERDTreeToggle<CR>
let NERDTreeMapMenu='z'
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
"------------------------------------------

"---------------nerdcommenter-------------
let g:NERDCustomDelimiters = { 'c': { 'left': '/* ','right': ' */' } }
"-----------------------------------------

"---------------tagbar--------------------
nnoremap <silent> <F7> :TagbarToggle<CR>
"-----------------------------------------

"-------------ctags------------------------
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
let g:gutentags_ctags_tagfile = '.tags'
let s:vim_tags = expand('~/.cache/tags')
let g:gutentags_cache_dir = s:vim_tags
if !isdirectory(s:vim_tags)
   silent! call mkdir(s:vim_tags, 'p')
 endif
let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']
"-----------------------------------------

inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

"--------------ctrlp---------------------
let g:ctrlp_working_path_mode = 'a'
let g:ctrlp_by_filename = 0
let g:ctrlp_regexp = 1
let g:ctrlp_clear_cache_on_exit = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_max_files = 0
let g:ctrlp_max_depth = 20
let g:ctrlp_custom_ignore = {
   \ 'dir':  '\v[\/](\.git|\.hg|\.svn|node_modules|build|install|log)$',
   \ 'file': '\v\.(exe|so|dll|o|swp)$',
   \ }
"-----------------------------------------

"--------------airline---------------------
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline_powerline_fonts = 1
"-----------------------------------------

"--------easy motion---------------
let g:EasyMotion_leader_key = 'q'
"----------------------------------

"--------emmet---------------------
let g:user_emmet_leader_key='<C-M>'
let g:user_emmet_install_global = 0
autocmd FileType html,css,scss EmmetInstall
"----------------------------------
"
"-----------------gundo--------------------------------
nnoremap <silent> <F5> :GundoToggle<CR>
let g:gundo_width = 30
let g:gundo_preview_height = 40
let g:gundo_right = 1
"------------------------------------------------------
"
let g:vim_markdown_folding_disabled = 1

let g:ale_linters = {
\   'c++': ['clang'],
\   'c': ['clang'],
\   'python': ['pylint'],
\}

"let g:ncm2_pyclang#library_path = '/usr/local/Cellar/llvm/7.0.0_1/lib/libclang.dylib'
let g:ncm2_pyclang#library_path = '/usr/lib/x86_64-linux-gnu/libclang-6.0.so'

let g:ncm2_pyclang#database_path = []

autocmd FileType c,cpp nnoremap <buffer> ;; :<c-u>call ncm2_pyclang#goto_declaration()<cr>

let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\}

let g:ale_fix_on_save = 1


" ctags
let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']

let g:gutentags_ctags_tagfile = '.tags'

let s:vim_tags = expand('~/.cache/tags')

let g:gutentags_cache_dir = s:vim_tags

if !isdirectory(s:vim_tags)
  silent! call mkdir(s:vim_tags, 'p')
endif

let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

set statusline+=%{gutentags#statusline()}

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }


" for C++ style, change the '@' to '\'
let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre = "\\brief "
let g:DoxygenToolkit_templateParamTag_pre = "\\tparam "
let g:DoxygenToolkit_paramTag_pre = "\\param "
let g:DoxygenToolkit_returnTag = "\\return "
let g:DoxygenToolkit_throwTag_pre = "\\throw " " @exception is also valid
let g:DoxygenToolkit_fileTag = "\\file "
let g:DoxygenToolkit_dateTag = "\\date "
let g:DoxygenToolkit_authorTag = "\\author "
let g:DoxygenToolkit_versionTag = "\\version "
let g:DoxygenToolkit_blockTag = "\\name "
let g:DoxygenToolkit_classTag = "\\class "
let g:DoxygenToolkit_authorName = "YuSheng Tseng, chester.tseng@adlinktech.com"
let g:doxygen_enhanced_color = 1
"let g:load_doxygen_syntax = 1
